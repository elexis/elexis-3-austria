/*******************************************************************************
 * Copyright (c) 2015 MEDEVIT and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MEDEVIT <office@medevit.at> - initial API and implementation
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.07.19 at 11:02:34 AM MESZ 
//


package at.medevit.elexis.kassen.edivka.rechnung.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tpsTechnischeInterpretationsMoeglichkeit.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="tpsTechnischeInterpretationsMoeglichkeit">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="*.doc"/>
 *     &lt;enumeration value="*.htm"/>
 *     &lt;enumeration value="*.html"/>
 *     &lt;enumeration value="*.pdf"/>
 *     &lt;enumeration value="*.rtf"/>
 *     &lt;enumeration value="*.txt"/>
 *     &lt;enumeration value="AllExisting"/>
 *     &lt;enumeration value="AllToNothing"/>
 *     &lt;enumeration value="LaborEdifact"/>
 *     &lt;enumeration value="NothingToDo"/>
 *     &lt;enumeration value="SVAbrechnung"/>
 *     &lt;enumeration value="SimpleEDIFACT"/>
 *     &lt;enumeration value="SimpleText"/>
 *     &lt;enumeration value="StdK2203EDIFACT"/>
 *     &lt;enumeration value="StdK2203XML"/>
 *     &lt;enumeration value="StdK2204EDIFACT"/>
 *     &lt;enumeration value="StdK2204XML"/>
 *     &lt;enumeration value="TextEdifact"/>
 *     &lt;enumeration value="WienKomMediKom"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "tpsTechnischeInterpretationsMoeglichkeit")
@XmlEnum
public enum TpsTechnischeInterpretationsMoeglichkeit {

    @XmlEnumValue("*.doc")
    DOC("*.doc"),
    @XmlEnumValue("*.htm")
    HTM("*.htm"),
    @XmlEnumValue("*.html")
    HTML("*.html"),
    @XmlEnumValue("*.pdf")
    PDF("*.pdf"),
    @XmlEnumValue("*.rtf")
    RTF("*.rtf"),
    @XmlEnumValue("*.txt")
    TXT("*.txt"),
    @XmlEnumValue("AllExisting")
    ALL_EXISTING("AllExisting"),
    @XmlEnumValue("AllToNothing")
    ALL_TO_NOTHING("AllToNothing"),
    @XmlEnumValue("LaborEdifact")
    LABOR_EDIFACT("LaborEdifact"),
    @XmlEnumValue("NothingToDo")
    NOTHING_TO_DO("NothingToDo"),
    @XmlEnumValue("SVAbrechnung")
    SV_ABRECHNUNG("SVAbrechnung"),
    @XmlEnumValue("SimpleEDIFACT")
    SIMPLE_EDIFACT("SimpleEDIFACT"),
    @XmlEnumValue("SimpleText")
    SIMPLE_TEXT("SimpleText"),
    @XmlEnumValue("StdK2203EDIFACT")
    STD_K_2203_EDIFACT("StdK2203EDIFACT"),
    @XmlEnumValue("StdK2203XML")
    STD_K_2203_XML("StdK2203XML"),
    @XmlEnumValue("StdK2204EDIFACT")
    STD_K_2204_EDIFACT("StdK2204EDIFACT"),
    @XmlEnumValue("StdK2204XML")
    STD_K_2204_XML("StdK2204XML"),
    @XmlEnumValue("TextEdifact")
    TEXT_EDIFACT("TextEdifact"),
    @XmlEnumValue("WienKomMediKom")
    WIEN_KOM_MEDI_KOM("WienKomMediKom");
    private final String value;

    TpsTechnischeInterpretationsMoeglichkeit(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TpsTechnischeInterpretationsMoeglichkeit fromValue(String v) {
        for (TpsTechnischeInterpretationsMoeglichkeit c: TpsTechnischeInterpretationsMoeglichkeit.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
