/*******************************************************************************
 * Copyright (c) 2015 MEDEVIT and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MEDEVIT <office@medevit.at> - initial API and implementation
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.07.19 at 11:02:34 AM MESZ 
//


package at.medevit.elexis.kassen.edivka.rechnung.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tpsLokalesEDVSystem.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="tpsLokalesEDVSystem">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="ALAB"/>
 *     &lt;enumeration value="APOS"/>
 *     &lt;enumeration value="ARIS"/>
 *     &lt;enumeration value="ASKLEPIOS"/>
 *     &lt;enumeration value="Actio"/>
 *     &lt;enumeration value="Alphadoc_Windows"/>
 *     &lt;enumeration value="CAS-med"/>
 *     &lt;enumeration value="CEOMED-DENTAL"/>
 *     &lt;enumeration value="COMED"/>
 *     &lt;enumeration value="CSPmed"/>
 *     &lt;enumeration value="CSPmed_Opthalmologie"/>
 *     &lt;enumeration value="Ceo-MED"/>
 *     &lt;enumeration value="CoPAMed"/>
 *     &lt;enumeration value="DAFA"/>
 *     &lt;enumeration value="DENTAL2000"/>
 *     &lt;enumeration value="DOC"/>
 *     &lt;enumeration value="DataDent"/>
 *     &lt;enumeration value="Dentavision"/>
 *     &lt;enumeration value="GEM-DENT3.0"/>
 *     &lt;enumeration value="GIS3.0"/>
 *     &lt;enumeration value="HERBAMED"/>
 *     &lt;enumeration value="Hypermed"/>
 *     &lt;enumeration value="Hypermed4.0"/>
 *     &lt;enumeration value="IB-MED"/>
 *     &lt;enumeration value="IFA"/>
 *     &lt;enumeration value="LOGOMED"/>
 *     &lt;enumeration value="MED2000"/>
 *     &lt;enumeration value="MEDICOR"/>
 *     &lt;enumeration value="META/Dent"/>
 *     &lt;enumeration value="MIC-PROMED"/>
 *     &lt;enumeration value="MeDATA_2000"/>
 *     &lt;enumeration value="MedStar"/>
 *     &lt;enumeration value="Medent"/>
 *     &lt;enumeration value="Medicus@Praxis"/>
 *     &lt;enumeration value="Medinfo"/>
 *     &lt;enumeration value="Medworx"/>
 *     &lt;enumeration value="Molar_for_Windows"/>
 *     &lt;enumeration value="Multimed5.25"/>
 *     &lt;enumeration value="Optamed"/>
 *     &lt;enumeration value="PRAKTIKUS"/>
 *     &lt;enumeration value="PYRAMED"/>
 *     &lt;enumeration value="Pcpo"/>
 *     &lt;enumeration value="PowerDent"/>
 *     &lt;enumeration value="Praxis2000"/>
 *     &lt;enumeration value="PraxisEDV"/>
 *     &lt;enumeration value="Praxisverwaltung"/>
 *     &lt;enumeration value="Profi-Med"/>
 *     &lt;enumeration value="QuickMed"/>
 *     &lt;enumeration value="RADSYS"/>
 *     &lt;enumeration value="RODENT"/>
 *     &lt;enumeration value="S-MED"/>
 *     &lt;enumeration value="SMS-ACTIO"/>
 *     &lt;enumeration value="SUPERMED2001"/>
 *     &lt;enumeration value="SoftworkDentalsysteme"/>
 *     &lt;enumeration value="TOPMED"/>
 *     &lt;enumeration value="Touchdent"/>
 *     &lt;enumeration value="Unimed"/>
 *     &lt;enumeration value="WEBMED"/>
 *     &lt;enumeration value="WienKomMediKom"/>
 *     &lt;enumeration value="WinDent"/>
 *     &lt;enumeration value="Winmed"/>
 *     &lt;enumeration value="XCOM"/>
 *     &lt;enumeration value="XR"/>
 *     &lt;enumeration value="asy2"/>
 *     &lt;enumeration value="asyNoveau"/>
 *     &lt;enumeration value="eos"/>
 *     &lt;enumeration value="schillerMED"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "tpsLokalesEDVSystem")
@XmlEnum
public enum TpsLokalesEDVSystem {

    ALAB("ALAB"),
    APOS("APOS"),
    ARIS("ARIS"),
    ASKLEPIOS("ASKLEPIOS"),
    @XmlEnumValue("Actio")
    ACTIO("Actio"),
    @XmlEnumValue("Alphadoc_Windows")
    ALPHADOC_WINDOWS("Alphadoc_Windows"),
    @XmlEnumValue("CAS-med")
    CAS_MED("CAS-med"),
    @XmlEnumValue("CEOMED-DENTAL")
    CEOMED_DENTAL("CEOMED-DENTAL"),
    COMED("COMED"),
    @XmlEnumValue("CSPmed")
    CS_PMED("CSPmed"),
    @XmlEnumValue("CSPmed_Opthalmologie")
    CS_PMED_OPTHALMOLOGIE("CSPmed_Opthalmologie"),
    @XmlEnumValue("Ceo-MED")
    CEO_MED("Ceo-MED"),
    @XmlEnumValue("CoPAMed")
    CO_PA_MED("CoPAMed"),
    DAFA("DAFA"),
    @XmlEnumValue("DENTAL2000")
    DENTAL_2000("DENTAL2000"),
    DOC("DOC"),
    @XmlEnumValue("DataDent")
    DATA_DENT("DataDent"),
    @XmlEnumValue("Dentavision")
    DENTAVISION("Dentavision"),
    @XmlEnumValue("GEM-DENT3.0")
    GEM_DENT_3_0("GEM-DENT3.0"),
    @XmlEnumValue("GIS3.0")
    GIS_3_0("GIS3.0"),
    HERBAMED("HERBAMED"),
    @XmlEnumValue("Hypermed")
    HYPERMED("Hypermed"),
    @XmlEnumValue("Hypermed4.0")
    HYPERMED_4_0("Hypermed4.0"),
    @XmlEnumValue("IB-MED")
    IB_MED("IB-MED"),
    IFA("IFA"),
    LOGOMED("LOGOMED"),
    @XmlEnumValue("MED2000")
    MED_2000("MED2000"),
    MEDICOR("MEDICOR"),
    @XmlEnumValue("META/Dent")
    META_DENT("META/Dent"),
    @XmlEnumValue("MIC-PROMED")
    MIC_PROMED("MIC-PROMED"),
    @XmlEnumValue("MeDATA_2000")
    ME_DATA_2000("MeDATA_2000"),
    @XmlEnumValue("MedStar")
    MED_STAR("MedStar"),
    @XmlEnumValue("Medent")
    MEDENT("Medent"),
    @XmlEnumValue("Medicus@Praxis")
    MEDICUS_PRAXIS("Medicus@Praxis"),
    @XmlEnumValue("Medinfo")
    MEDINFO("Medinfo"),
    @XmlEnumValue("Medworx")
    MEDWORX("Medworx"),
    @XmlEnumValue("Molar_for_Windows")
    MOLAR_FOR_WINDOWS("Molar_for_Windows"),
    @XmlEnumValue("Multimed5.25")
    MULTIMED_5_25("Multimed5.25"),
    @XmlEnumValue("Optamed")
    OPTAMED("Optamed"),
    PRAKTIKUS("PRAKTIKUS"),
    PYRAMED("PYRAMED"),
    @XmlEnumValue("Pcpo")
    PCPO("Pcpo"),
    @XmlEnumValue("PowerDent")
    POWER_DENT("PowerDent"),
    @XmlEnumValue("Praxis2000")
    PRAXIS_2000("Praxis2000"),
    @XmlEnumValue("PraxisEDV")
    PRAXIS_EDV("PraxisEDV"),
    @XmlEnumValue("Praxisverwaltung")
    PRAXISVERWALTUNG("Praxisverwaltung"),
    @XmlEnumValue("Profi-Med")
    PROFI_MED("Profi-Med"),
    @XmlEnumValue("QuickMed")
    QUICK_MED("QuickMed"),
    RADSYS("RADSYS"),
    RODENT("RODENT"),
    @XmlEnumValue("S-MED")
    S_MED("S-MED"),
    @XmlEnumValue("SMS-ACTIO")
    SMS_ACTIO("SMS-ACTIO"),
    @XmlEnumValue("SUPERMED2001")
    SUPERMED_2001("SUPERMED2001"),
    @XmlEnumValue("SoftworkDentalsysteme")
    SOFTWORK_DENTALSYSTEME("SoftworkDentalsysteme"),
    TOPMED("TOPMED"),
    @XmlEnumValue("Touchdent")
    TOUCHDENT("Touchdent"),
    @XmlEnumValue("Unimed")
    UNIMED("Unimed"),
    WEBMED("WEBMED"),
    @XmlEnumValue("WienKomMediKom")
    WIEN_KOM_MEDI_KOM("WienKomMediKom"),
    @XmlEnumValue("WinDent")
    WIN_DENT("WinDent"),
    @XmlEnumValue("Winmed")
    WINMED("Winmed"),
    XCOM("XCOM"),
    XR("XR"),
    @XmlEnumValue("asy2")
    ASY_2("asy2"),
    @XmlEnumValue("asyNoveau")
    ASY_NOVEAU("asyNoveau"),
    @XmlEnumValue("eos")
    EOS("eos"),
    @XmlEnumValue("schillerMED")
    SCHILLER_MED("schillerMED");
    private final String value;

    TpsLokalesEDVSystem(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TpsLokalesEDVSystem fromValue(String v) {
        for (TpsLokalesEDVSystem c: TpsLokalesEDVSystem.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
